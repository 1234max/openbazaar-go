// Code generated by protoc-gen-go.
// source: contracts.proto
// DO NOT EDIT!

/*
Package contracts is a generated protocol buffer package.

It is generated from these files:
	contracts.proto

It has these top-level messages:
	RicardianContract
	Listing
	Order
	OrderConfirmation
	Rating
	Dispute
	DisputeResolution
	Refund
	ID
	Signatures
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type Listing_Metadata_CategorySub int32

const (
	Listing_Metadata_NA          Listing_Metadata_CategorySub = 0
	Listing_Metadata_FIXED_PRICE Listing_Metadata_CategorySub = 1
	Listing_Metadata_AUCTION     Listing_Metadata_CategorySub = 2
)

var Listing_Metadata_CategorySub_name = map[int32]string{
	0: "NA",
	1: "FIXED_PRICE",
	2: "AUCTION",
}
var Listing_Metadata_CategorySub_value = map[string]int32{
	"NA":          0,
	"FIXED_PRICE": 1,
	"AUCTION":     2,
}

func (x Listing_Metadata_CategorySub) String() string {
	return proto.EnumName(Listing_Metadata_CategorySub_name, int32(x))
}
func (Listing_Metadata_CategorySub) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor1, []int{1, 0, 0}
}

type Listing_Metadata_Category int32

const (
	Listing_Metadata_UNKNOWN       Listing_Metadata_Category = 0
	Listing_Metadata_PHYSICAL_GOOD Listing_Metadata_Category = 1
	Listing_Metadata_DIGITAL_GOOD  Listing_Metadata_Category = 2
	Listing_Metadata_SERVICE       Listing_Metadata_Category = 3
)

var Listing_Metadata_Category_name = map[int32]string{
	0: "UNKNOWN",
	1: "PHYSICAL_GOOD",
	2: "DIGITAL_GOOD",
	3: "SERVICE",
}
var Listing_Metadata_Category_value = map[string]int32{
	"UNKNOWN":       0,
	"PHYSICAL_GOOD": 1,
	"DIGITAL_GOOD":  2,
	"SERVICE":       3,
}

func (x Listing_Metadata_Category) String() string {
	return proto.EnumName(Listing_Metadata_Category_name, int32(x))
}
func (Listing_Metadata_Category) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor1, []int{1, 0, 1}
}

type Listing_ShippingOption_ShippingType int32

const (
	Listing_ShippingOption_LOCAL_PICKUP Listing_ShippingOption_ShippingType = 0
	Listing_ShippingOption_FIXED_PRICE  Listing_ShippingOption_ShippingType = 1
)

var Listing_ShippingOption_ShippingType_name = map[int32]string{
	0: "LOCAL_PICKUP",
	1: "FIXED_PRICE",
}
var Listing_ShippingOption_ShippingType_value = map[string]int32{
	"LOCAL_PICKUP": 0,
	"FIXED_PRICE":  1,
}

func (x Listing_ShippingOption_ShippingType) String() string {
	return proto.EnumName(Listing_ShippingOption_ShippingType_name, int32(x))
}
func (Listing_ShippingOption_ShippingType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor1, []int{1, 2, 0}
}

type Listing_ShippingRule_RuleType int32

const (
	Listing_ShippingRule_QUANTITY_DISCOUNT          Listing_ShippingRule_RuleType = 0
	Listing_ShippingRule_FLAT_FEE_QUANTITY_RANGE    Listing_ShippingRule_RuleType = 1
	Listing_ShippingRule_FLAT_FEE_WEIGHT_RANGE      Listing_ShippingRule_RuleType = 2
	Listing_ShippingRule_COMBINED_SHIPPING_ADD      Listing_ShippingRule_RuleType = 3
	Listing_ShippingRule_COMBINED_SHIPPING_SUBTRACT Listing_ShippingRule_RuleType = 4
)

var Listing_ShippingRule_RuleType_name = map[int32]string{
	0: "QUANTITY_DISCOUNT",
	1: "FLAT_FEE_QUANTITY_RANGE",
	2: "FLAT_FEE_WEIGHT_RANGE",
	3: "COMBINED_SHIPPING_ADD",
	4: "COMBINED_SHIPPING_SUBTRACT",
}
var Listing_ShippingRule_RuleType_value = map[string]int32{
	"QUANTITY_DISCOUNT":          0,
	"FLAT_FEE_QUANTITY_RANGE":    1,
	"FLAT_FEE_WEIGHT_RANGE":      2,
	"COMBINED_SHIPPING_ADD":      3,
	"COMBINED_SHIPPING_SUBTRACT": 4,
}

func (x Listing_ShippingRule_RuleType) String() string {
	return proto.EnumName(Listing_ShippingRule_RuleType_name, int32(x))
}
func (Listing_ShippingRule_RuleType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor1, []int{1, 3, 0}
}

type Order_Payment_Method int32

const (
	Order_Payment_DIRECT    Order_Payment_Method = 0
	Order_Payment_MODERATED Order_Payment_Method = 1
)

var Order_Payment_Method_name = map[int32]string{
	0: "DIRECT",
	1: "MODERATED",
}
var Order_Payment_Method_value = map[string]int32{
	"DIRECT":    0,
	"MODERATED": 1,
}

func (x Order_Payment_Method) String() string {
	return proto.EnumName(Order_Payment_Method_name, int32(x))
}
func (Order_Payment_Method) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{2, 2, 0} }

type Signatures_Section int32

const (
	Signatures_NA                 Signatures_Section = 0
	Signatures_LISTING            Signatures_Section = 1
	Signatures_ORDER              Signatures_Section = 2
	Signatures_ORDER_CONFIRMATION Signatures_Section = 3
	Signatures_RATING             Signatures_Section = 4
	Signatures_DISPUTE            Signatures_Section = 5
	Signatures_DISPUTE_RESOLUTION Signatures_Section = 6
	Signatures_REFUND             Signatures_Section = 7
)

var Signatures_Section_name = map[int32]string{
	0: "NA",
	1: "LISTING",
	2: "ORDER",
	3: "ORDER_CONFIRMATION",
	4: "RATING",
	5: "DISPUTE",
	6: "DISPUTE_RESOLUTION",
	7: "REFUND",
}
var Signatures_Section_value = map[string]int32{
	"NA":                 0,
	"LISTING":            1,
	"ORDER":              2,
	"ORDER_CONFIRMATION": 3,
	"RATING":             4,
	"DISPUTE":            5,
	"DISPUTE_RESOLUTION": 6,
	"REFUND":             7,
}

func (x Signatures_Section) String() string {
	return proto.EnumName(Signatures_Section_name, int32(x))
}
func (Signatures_Section) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{9, 0} }

type RicardianContract struct {
	VendorListings          []*Listing         `protobuf:"bytes,1,rep,name=vendorListings" json:"vendorListings,omitempty"`
	BuyerOrder              *Order             `protobuf:"bytes,2,opt,name=buyerOrder" json:"buyerOrder,omitempty"`
	VendorOrderConfirmation *OrderConfirmation `protobuf:"bytes,3,opt,name=vendorOrderConfirmation" json:"vendorOrderConfirmation,omitempty"`
	BuyerRating             *Rating            `protobuf:"bytes,4,opt,name=buyerRating" json:"buyerRating,omitempty"`
	Dispute                 *Dispute           `protobuf:"bytes,5,opt,name=dispute" json:"dispute,omitempty"`
	DisputeResolution       *DisputeResolution `protobuf:"bytes,6,opt,name=disputeResolution" json:"disputeResolution,omitempty"`
	Refund                  *Refund            `protobuf:"bytes,7,opt,name=refund" json:"refund,omitempty"`
	Signatures              []*Signatures      `protobuf:"bytes,8,rep,name=signatures" json:"signatures,omitempty"`
}

func (m *RicardianContract) Reset()                    { *m = RicardianContract{} }
func (m *RicardianContract) String() string            { return proto.CompactTextString(m) }
func (*RicardianContract) ProtoMessage()               {}
func (*RicardianContract) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *RicardianContract) GetVendorListings() []*Listing {
	if m != nil {
		return m.VendorListings
	}
	return nil
}

func (m *RicardianContract) GetBuyerOrder() *Order {
	if m != nil {
		return m.BuyerOrder
	}
	return nil
}

func (m *RicardianContract) GetVendorOrderConfirmation() *OrderConfirmation {
	if m != nil {
		return m.VendorOrderConfirmation
	}
	return nil
}

func (m *RicardianContract) GetBuyerRating() *Rating {
	if m != nil {
		return m.BuyerRating
	}
	return nil
}

func (m *RicardianContract) GetDispute() *Dispute {
	if m != nil {
		return m.Dispute
	}
	return nil
}

func (m *RicardianContract) GetDisputeResolution() *DisputeResolution {
	if m != nil {
		return m.DisputeResolution
	}
	return nil
}

func (m *RicardianContract) GetRefund() *Refund {
	if m != nil {
		return m.Refund
	}
	return nil
}

func (m *RicardianContract) GetSignatures() []*Signatures {
	if m != nil {
		return m.Signatures
	}
	return nil
}

type Listing struct {
	Slug               string                    `protobuf:"bytes,1,opt,name=slug" json:"slug,omitempty"`
	VendorID           *ID                       `protobuf:"bytes,2,opt,name=vendorID" json:"vendorID,omitempty"`
	Metadata           *Listing_Metadata         `protobuf:"bytes,3,opt,name=metadata" json:"metadata,omitempty"`
	Item               *Listing_Item             `protobuf:"bytes,4,opt,name=item" json:"item,omitempty"`
	ShippingOptions    []*Listing_ShippingOption `protobuf:"bytes,5,rep,name=shippingOptions" json:"shippingOptions,omitempty"`
	ShippingRules      []*Listing_ShippingRule   `protobuf:"bytes,6,rep,name=shippingRules" json:"shippingRules,omitempty"`
	Tax                *Listing_Tax              `protobuf:"bytes,7,opt,name=tax" json:"tax,omitempty"`
	Coupons            []*Listing_Coupon         `protobuf:"bytes,8,rep,name=coupons" json:"coupons,omitempty"`
	Moderators         []string                  `protobuf:"bytes,9,rep,name=moderators" json:"moderators,omitempty"`
	TermsAndConditions string                    `protobuf:"bytes,10,opt,name=termsAndConditions" json:"termsAndConditions,omitempty"`
	RefundPolicy       string                    `protobuf:"bytes,11,opt,name=refundPolicy" json:"refundPolicy,omitempty"`
	// Only used by the API when posting a new listing.
	// Shouldn't be included in the seeded listing.
	// Negative implies no inventory tracking.
	InventoryCount int32 `protobuf:"varint,12,opt,name=inventoryCount" json:"inventoryCount,omitempty"`
}

func (m *Listing) Reset()                    { *m = Listing{} }
func (m *Listing) String() string            { return proto.CompactTextString(m) }
func (*Listing) ProtoMessage()               {}
func (*Listing) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *Listing) GetVendorID() *ID {
	if m != nil {
		return m.VendorID
	}
	return nil
}

func (m *Listing) GetMetadata() *Listing_Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Listing) GetItem() *Listing_Item {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *Listing) GetShippingOptions() []*Listing_ShippingOption {
	if m != nil {
		return m.ShippingOptions
	}
	return nil
}

func (m *Listing) GetShippingRules() []*Listing_ShippingRule {
	if m != nil {
		return m.ShippingRules
	}
	return nil
}

func (m *Listing) GetTax() *Listing_Tax {
	if m != nil {
		return m.Tax
	}
	return nil
}

func (m *Listing) GetCoupons() []*Listing_Coupon {
	if m != nil {
		return m.Coupons
	}
	return nil
}

type Listing_Metadata struct {
	Version     uint32                       `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Category    Listing_Metadata_Category    `protobuf:"varint,2,opt,name=category,enum=Listing_Metadata_Category" json:"category,omitempty"`
	CategorySub Listing_Metadata_CategorySub `protobuf:"varint,3,opt,name=categorySub,enum=Listing_Metadata_CategorySub" json:"categorySub,omitempty"`
	Expiry      uint64                       `protobuf:"varint,4,opt,name=expiry" json:"expiry,omitempty"`
}

func (m *Listing_Metadata) Reset()                    { *m = Listing_Metadata{} }
func (m *Listing_Metadata) String() string            { return proto.CompactTextString(m) }
func (*Listing_Metadata) ProtoMessage()               {}
func (*Listing_Metadata) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1, 0} }

type Listing_Item struct {
	Title          string                 `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Description    string                 `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	ProcessingTime string                 `protobuf:"bytes,3,opt,name=processingTime" json:"processingTime,omitempty"`
	PricePerUnit   *Listing_Price         `protobuf:"bytes,4,opt,name=pricePerUnit" json:"pricePerUnit,omitempty"`
	Nsfw           bool                   `protobuf:"varint,5,opt,name=nsfw" json:"nsfw,omitempty"`
	Tags           []string               `protobuf:"bytes,6,rep,name=tags" json:"tags,omitempty"`
	Images         []*Listing_Item_Image  `protobuf:"bytes,7,rep,name=images" json:"images,omitempty"`
	SKU            string                 `protobuf:"bytes,8,opt,name=SKU,json=sKU" json:"SKU,omitempty"`
	Weight         float32                `protobuf:"fixed32,9,opt,name=weight" json:"weight,omitempty"`
	Condition      string                 `protobuf:"bytes,10,opt,name=condition" json:"condition,omitempty"`
	Options        []*Listing_Item_Option `protobuf:"bytes,11,rep,name=options" json:"options,omitempty"`
}

func (m *Listing_Item) Reset()                    { *m = Listing_Item{} }
func (m *Listing_Item) String() string            { return proto.CompactTextString(m) }
func (*Listing_Item) ProtoMessage()               {}
func (*Listing_Item) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1, 1} }

func (m *Listing_Item) GetPricePerUnit() *Listing_Price {
	if m != nil {
		return m.PricePerUnit
	}
	return nil
}

func (m *Listing_Item) GetImages() []*Listing_Item_Image {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *Listing_Item) GetOptions() []*Listing_Item_Option {
	if m != nil {
		return m.Options
	}
	return nil
}

type Listing_Item_Option struct {
	Title       string                          `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Description string                          `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	Variants    []*Listing_Item_Option_Variants `protobuf:"bytes,3,rep,name=variants" json:"variants,omitempty"`
}

func (m *Listing_Item_Option) Reset()                    { *m = Listing_Item_Option{} }
func (m *Listing_Item_Option) String() string            { return proto.CompactTextString(m) }
func (*Listing_Item_Option) ProtoMessage()               {}
func (*Listing_Item_Option) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1, 1, 0} }

func (m *Listing_Item_Option) GetVariants() []*Listing_Item_Option_Variants {
	if m != nil {
		return m.Variants
	}
	return nil
}

type Listing_Item_Option_Variants struct {
	Name          string              `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Image         *Listing_Item_Image `protobuf:"bytes,2,opt,name=image" json:"image,omitempty"`
	PriceModifier *Listing_Price      `protobuf:"bytes,3,opt,name=priceModifier" json:"priceModifier,omitempty"`
}

func (m *Listing_Item_Option_Variants) Reset()         { *m = Listing_Item_Option_Variants{} }
func (m *Listing_Item_Option_Variants) String() string { return proto.CompactTextString(m) }
func (*Listing_Item_Option_Variants) ProtoMessage()    {}
func (*Listing_Item_Option_Variants) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{1, 1, 0, 0}
}

func (m *Listing_Item_Option_Variants) GetImage() *Listing_Item_Image {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *Listing_Item_Option_Variants) GetPriceModifier() *Listing_Price {
	if m != nil {
		return m.PriceModifier
	}
	return nil
}

type Listing_Item_Image struct {
	Hash     string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	FileName string `protobuf:"bytes,2,opt,name=fileName" json:"fileName,omitempty"`
}

func (m *Listing_Item_Image) Reset()                    { *m = Listing_Item_Image{} }
func (m *Listing_Item_Image) String() string            { return proto.CompactTextString(m) }
func (*Listing_Item_Image) ProtoMessage()               {}
func (*Listing_Item_Image) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1, 1, 1} }

type Listing_ShippingOption struct {
	Type    Listing_ShippingOption_ShippingType `protobuf:"varint,1,opt,name=type,enum=Listing_ShippingOption_ShippingType" json:"type,omitempty"`
	Regions []CountryCode                       `protobuf:"varint,2,rep,name=regions,enum=CountryCode" json:"regions,omitempty"`
	Options []*Listing_ShippingOption_Option    `protobuf:"bytes,3,rep,name=options" json:"options,omitempty"`
}

func (m *Listing_ShippingOption) Reset()                    { *m = Listing_ShippingOption{} }
func (m *Listing_ShippingOption) String() string            { return proto.CompactTextString(m) }
func (*Listing_ShippingOption) ProtoMessage()               {}
func (*Listing_ShippingOption) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1, 2} }

func (m *Listing_ShippingOption) GetOptions() []*Listing_ShippingOption_Option {
	if m != nil {
		return m.Options
	}
	return nil
}

type Listing_ShippingOption_Option struct {
	Service           string         `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
	Price             *Listing_Price `protobuf:"bytes,2,opt,name=price" json:"price,omitempty"`
	EstimatedDelivery string         `protobuf:"bytes,3,opt,name=estimatedDelivery" json:"estimatedDelivery,omitempty"`
}

func (m *Listing_ShippingOption_Option) Reset()         { *m = Listing_ShippingOption_Option{} }
func (m *Listing_ShippingOption_Option) String() string { return proto.CompactTextString(m) }
func (*Listing_ShippingOption_Option) ProtoMessage()    {}
func (*Listing_ShippingOption_Option) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{1, 2, 0}
}

func (m *Listing_ShippingOption_Option) GetPrice() *Listing_Price {
	if m != nil {
		return m.Price
	}
	return nil
}

type Listing_ShippingRule struct {
	RuleType     Listing_ShippingRule_RuleType `protobuf:"varint,1,opt,name=ruleType,enum=Listing_ShippingRule_RuleType" json:"ruleType,omitempty"`
	Regions      []CountryCode                 `protobuf:"varint,2,rep,name=regions,enum=CountryCode" json:"regions,omitempty"`
	MinimumRange uint32                        `protobuf:"varint,3,opt,name=minimumRange" json:"minimumRange,omitempty"`
	MaxRange     uint32                        `protobuf:"varint,4,opt,name=maxRange" json:"maxRange,omitempty"`
	Price        *Listing_Price                `protobuf:"bytes,5,opt,name=price" json:"price,omitempty"`
}

func (m *Listing_ShippingRule) Reset()                    { *m = Listing_ShippingRule{} }
func (m *Listing_ShippingRule) String() string            { return proto.CompactTextString(m) }
func (*Listing_ShippingRule) ProtoMessage()               {}
func (*Listing_ShippingRule) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1, 3} }

func (m *Listing_ShippingRule) GetPrice() *Listing_Price {
	if m != nil {
		return m.Price
	}
	return nil
}

type Listing_Tax struct {
	TaxType     string        `protobuf:"bytes,1,opt,name=taxType" json:"taxType,omitempty"`
	TaxRegions  []CountryCode `protobuf:"varint,2,rep,name=taxRegions,enum=CountryCode" json:"taxRegions,omitempty"`
	TaxShipping bool          `protobuf:"varint,3,opt,name=taxShipping" json:"taxShipping,omitempty"`
	Percentage  float32       `protobuf:"fixed32,4,opt,name=percentage" json:"percentage,omitempty"`
}

func (m *Listing_Tax) Reset()                    { *m = Listing_Tax{} }
func (m *Listing_Tax) String() string            { return proto.CompactTextString(m) }
func (*Listing_Tax) ProtoMessage()               {}
func (*Listing_Tax) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1, 4} }

type Listing_Coupon struct {
	Title    string         `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Hash     string         `protobuf:"bytes,2,opt,name=hash" json:"hash,omitempty"`
	Discount *Listing_Price `protobuf:"bytes,3,opt,name=discount" json:"discount,omitempty"`
}

func (m *Listing_Coupon) Reset()                    { *m = Listing_Coupon{} }
func (m *Listing_Coupon) String() string            { return proto.CompactTextString(m) }
func (*Listing_Coupon) ProtoMessage()               {}
func (*Listing_Coupon) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1, 5} }

func (m *Listing_Coupon) GetDiscount() *Listing_Price {
	if m != nil {
		return m.Discount
	}
	return nil
}

type Listing_Price struct {
	CurrencyCode string  `protobuf:"bytes,1,opt,name=currencyCode" json:"currencyCode,omitempty"`
	Price        float64 `protobuf:"fixed64,2,opt,name=price" json:"price,omitempty"`
}

func (m *Listing_Price) Reset()                    { *m = Listing_Price{} }
func (m *Listing_Price) String() string            { return proto.CompactTextString(m) }
func (*Listing_Price) ProtoMessage()               {}
func (*Listing_Price) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1, 6} }

type Order struct {
	RefundAddress string          `protobuf:"bytes,1,opt,name=refundAddress" json:"refundAddress,omitempty"`
	Shipping      *Order_Shipping `protobuf:"bytes,2,opt,name=shipping" json:"shipping,omitempty"`
	BuyerID       *ID             `protobuf:"bytes,3,opt,name=buyerID" json:"buyerID,omitempty"`
	Timestamp     uint64          `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	Items         []*Order_Item   `protobuf:"bytes,5,rep,name=items" json:"items,omitempty"`
	Payment       *Order_Payment  `protobuf:"bytes,6,opt,name=payment" json:"payment,omitempty"`
}

func (m *Order) Reset()                    { *m = Order{} }
func (m *Order) String() string            { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()               {}
func (*Order) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *Order) GetShipping() *Order_Shipping {
	if m != nil {
		return m.Shipping
	}
	return nil
}

func (m *Order) GetBuyerID() *ID {
	if m != nil {
		return m.BuyerID
	}
	return nil
}

func (m *Order) GetItems() []*Order_Item {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *Order) GetPayment() *Order_Payment {
	if m != nil {
		return m.Payment
	}
	return nil
}

type Order_Shipping struct {
	ShipTo     string      `protobuf:"bytes,1,opt,name=shipTo" json:"shipTo,omitempty"`
	Address    string      `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
	City       string      `protobuf:"bytes,3,opt,name=city" json:"city,omitempty"`
	State      string      `protobuf:"bytes,4,opt,name=state" json:"state,omitempty"`
	PostalCode string      `protobuf:"bytes,5,opt,name=postalCode" json:"postalCode,omitempty"`
	Country    CountryCode `protobuf:"varint,6,opt,name=country,enum=CountryCode" json:"country,omitempty"`
}

func (m *Order_Shipping) Reset()                    { *m = Order_Shipping{} }
func (m *Order_Shipping) String() string            { return proto.CompactTextString(m) }
func (*Order_Shipping) ProtoMessage()               {}
func (*Order_Shipping) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2, 0} }

type Order_Item struct {
	ListingHash []byte               `protobuf:"bytes,1,opt,name=listingHash,proto3" json:"listingHash,omitempty"`
	Quantity    uint32               `protobuf:"varint,2,opt,name=quantity" json:"quantity,omitempty"`
	Options     []*Order_Item_Option `protobuf:"bytes,3,rep,name=options" json:"options,omitempty"`
}

func (m *Order_Item) Reset()                    { *m = Order_Item{} }
func (m *Order_Item) String() string            { return proto.CompactTextString(m) }
func (*Order_Item) ProtoMessage()               {}
func (*Order_Item) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2, 1} }

func (m *Order_Item) GetOptions() []*Order_Item_Option {
	if m != nil {
		return m.Options
	}
	return nil
}

type Order_Item_Option struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *Order_Item_Option) Reset()                    { *m = Order_Item_Option{} }
func (m *Order_Item_Option) String() string            { return proto.CompactTextString(m) }
func (*Order_Item_Option) ProtoMessage()               {}
func (*Order_Item_Option) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2, 1, 0} }

type Order_Payment struct {
	Method       Order_Payment_Method `protobuf:"varint,1,opt,name=method,enum=Order_Payment_Method" json:"method,omitempty"`
	Moderator    string               `protobuf:"bytes,2,opt,name=moderator" json:"moderator,omitempty"`
	Amount       uint32               `protobuf:"varint,3,opt,name=amount" json:"amount,omitempty"`
	Chaincode    string               `protobuf:"bytes,4,opt,name=chaincode" json:"chaincode,omitempty"`
	Address      string               `protobuf:"bytes,5,opt,name=address" json:"address,omitempty"`
	RedeemScript string               `protobuf:"bytes,6,opt,name=redeemScript" json:"redeemScript,omitempty"`
}

func (m *Order_Payment) Reset()                    { *m = Order_Payment{} }
func (m *Order_Payment) String() string            { return proto.CompactTextString(m) }
func (*Order_Payment) ProtoMessage()               {}
func (*Order_Payment) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2, 2} }

// TODO: complete other messages
type OrderConfirmation struct {
}

func (m *OrderConfirmation) Reset()                    { *m = OrderConfirmation{} }
func (m *OrderConfirmation) String() string            { return proto.CompactTextString(m) }
func (*OrderConfirmation) ProtoMessage()               {}
func (*OrderConfirmation) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

type Rating struct {
}

func (m *Rating) Reset()                    { *m = Rating{} }
func (m *Rating) String() string            { return proto.CompactTextString(m) }
func (*Rating) ProtoMessage()               {}
func (*Rating) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

type Dispute struct {
}

func (m *Dispute) Reset()                    { *m = Dispute{} }
func (m *Dispute) String() string            { return proto.CompactTextString(m) }
func (*Dispute) ProtoMessage()               {}
func (*Dispute) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

type DisputeResolution struct {
}

func (m *DisputeResolution) Reset()                    { *m = DisputeResolution{} }
func (m *DisputeResolution) String() string            { return proto.CompactTextString(m) }
func (*DisputeResolution) ProtoMessage()               {}
func (*DisputeResolution) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

type Refund struct {
}

func (m *Refund) Reset()                    { *m = Refund{} }
func (m *Refund) String() string            { return proto.CompactTextString(m) }
func (*Refund) ProtoMessage()               {}
func (*Refund) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

type ID struct {
	Guid         string      `protobuf:"bytes,1,opt,name=guid" json:"guid,omitempty"`
	BlockchainID string      `protobuf:"bytes,2,opt,name=blockchainID" json:"blockchainID,omitempty"`
	Pubkeys      *ID_Pubkeys `protobuf:"bytes,3,opt,name=pubkeys" json:"pubkeys,omitempty"`
}

func (m *ID) Reset()                    { *m = ID{} }
func (m *ID) String() string            { return proto.CompactTextString(m) }
func (*ID) ProtoMessage()               {}
func (*ID) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *ID) GetPubkeys() *ID_Pubkeys {
	if m != nil {
		return m.Pubkeys
	}
	return nil
}

type ID_Pubkeys struct {
	Guid    []byte `protobuf:"bytes,1,opt,name=guid,proto3" json:"guid,omitempty"`
	Bitcoin []byte `protobuf:"bytes,2,opt,name=bitcoin,proto3" json:"bitcoin,omitempty"`
}

func (m *ID_Pubkeys) Reset()                    { *m = ID_Pubkeys{} }
func (m *ID_Pubkeys) String() string            { return proto.CompactTextString(m) }
func (*ID_Pubkeys) ProtoMessage()               {}
func (*ID_Pubkeys) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8, 0} }

type Signatures struct {
	Section Signatures_Section `protobuf:"varint,1,opt,name=section,enum=Signatures_Section" json:"section,omitempty"`
	Guid    []byte             `protobuf:"bytes,2,opt,name=guid,proto3" json:"guid,omitempty"`
	Bitcoin []byte             `protobuf:"bytes,3,opt,name=bitcoin,proto3" json:"bitcoin,omitempty"`
}

func (m *Signatures) Reset()                    { *m = Signatures{} }
func (m *Signatures) String() string            { return proto.CompactTextString(m) }
func (*Signatures) ProtoMessage()               {}
func (*Signatures) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func init() {
	proto.RegisterType((*RicardianContract)(nil), "RicardianContract")
	proto.RegisterType((*Listing)(nil), "Listing")
	proto.RegisterType((*Listing_Metadata)(nil), "Listing.Metadata")
	proto.RegisterType((*Listing_Item)(nil), "Listing.Item")
	proto.RegisterType((*Listing_Item_Option)(nil), "Listing.Item.Option")
	proto.RegisterType((*Listing_Item_Option_Variants)(nil), "Listing.Item.Option.Variants")
	proto.RegisterType((*Listing_Item_Image)(nil), "Listing.Item.Image")
	proto.RegisterType((*Listing_ShippingOption)(nil), "Listing.ShippingOption")
	proto.RegisterType((*Listing_ShippingOption_Option)(nil), "Listing.ShippingOption.Option")
	proto.RegisterType((*Listing_ShippingRule)(nil), "Listing.ShippingRule")
	proto.RegisterType((*Listing_Tax)(nil), "Listing.Tax")
	proto.RegisterType((*Listing_Coupon)(nil), "Listing.Coupon")
	proto.RegisterType((*Listing_Price)(nil), "Listing.Price")
	proto.RegisterType((*Order)(nil), "Order")
	proto.RegisterType((*Order_Shipping)(nil), "Order.Shipping")
	proto.RegisterType((*Order_Item)(nil), "Order.Item")
	proto.RegisterType((*Order_Item_Option)(nil), "Order.Item.Option")
	proto.RegisterType((*Order_Payment)(nil), "Order.Payment")
	proto.RegisterType((*OrderConfirmation)(nil), "OrderConfirmation")
	proto.RegisterType((*Rating)(nil), "Rating")
	proto.RegisterType((*Dispute)(nil), "Dispute")
	proto.RegisterType((*DisputeResolution)(nil), "DisputeResolution")
	proto.RegisterType((*Refund)(nil), "Refund")
	proto.RegisterType((*ID)(nil), "ID")
	proto.RegisterType((*ID_Pubkeys)(nil), "ID.Pubkeys")
	proto.RegisterType((*Signatures)(nil), "Signatures")
	proto.RegisterEnum("Listing_Metadata_CategorySub", Listing_Metadata_CategorySub_name, Listing_Metadata_CategorySub_value)
	proto.RegisterEnum("Listing_Metadata_Category", Listing_Metadata_Category_name, Listing_Metadata_Category_value)
	proto.RegisterEnum("Listing_ShippingOption_ShippingType", Listing_ShippingOption_ShippingType_name, Listing_ShippingOption_ShippingType_value)
	proto.RegisterEnum("Listing_ShippingRule_RuleType", Listing_ShippingRule_RuleType_name, Listing_ShippingRule_RuleType_value)
	proto.RegisterEnum("Order_Payment_Method", Order_Payment_Method_name, Order_Payment_Method_value)
	proto.RegisterEnum("Signatures_Section", Signatures_Section_name, Signatures_Section_value)
}

var fileDescriptor1 = []byte{
	// 1843 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x58, 0x4b, 0x73, 0xe3, 0x58,
	0x15, 0xc6, 0x76, 0x6c, 0xc9, 0xc7, 0x8f, 0x24, 0xb7, 0xa7, 0xa7, 0x8d, 0xa0, 0x9b, 0xc6, 0x34,
	0x54, 0xf3, 0x52, 0x41, 0x86, 0xe2, 0xb9, 0x00, 0x8f, 0xed, 0xa4, 0x55, 0x49, 0x6c, 0x73, 0x2d,
	0xcf, 0x30, 0x1b, 0x52, 0x8a, 0xa4, 0x38, 0xb7, 0xc6, 0xb2, 0x8c, 0x24, 0x67, 0x3a, 0x1b, 0xf8,
	0x09, 0x6c, 0x58, 0x51, 0x54, 0xb1, 0x63, 0x49, 0xb1, 0xe1, 0x8f, 0xb0, 0xe1, 0x37, 0xb0, 0x9a,
	0x3f, 0xc0, 0x82, 0x73, 0x5f, 0xb2, 0x1c, 0x3b, 0x5d, 0xd4, 0xac, 0x72, 0xcf, 0x4b, 0xe7, 0xde,
	0xef, 0x3c, 0x1d, 0x38, 0xf4, 0xe3, 0x65, 0x96, 0x78, 0x7e, 0x96, 0xda, 0xab, 0x24, 0xce, 0x62,
	0x8b, 0xf8, 0xf1, 0x1a, 0x39, 0xf7, 0x7e, 0x1c, 0x84, 0x8a, 0xd7, 0xfd, 0x73, 0x05, 0x8e, 0x29,
	0xf3, 0xbd, 0x24, 0x60, 0xde, 0xb2, 0xaf, 0x0c, 0xc8, 0x0f, 0xa0, 0x7d, 0x17, 0x2e, 0x83, 0x38,
	0xb9, 0x60, 0x69, 0xc6, 0x96, 0xf3, 0xb4, 0x53, 0x7a, 0x59, 0x79, 0xdd, 0x38, 0x31, 0x6d, 0xc5,
	0xa0, 0x0f, 0xe4, 0xe4, 0x5b, 0x00, 0xd7, 0xeb, 0xfb, 0x30, 0x19, 0x27, 0x41, 0x98, 0x74, 0xca,
	0x2f, 0x4b, 0xa8, 0x5d, 0xb3, 0x05, 0x45, 0x0b, 0x12, 0x72, 0x01, 0xcf, 0xa4, 0xa5, 0x20, 0xd1,
	0xe1, 0x0d, 0x4b, 0x22, 0x2f, 0x63, 0xf1, 0xb2, 0x53, 0x11, 0x46, 0xc4, 0xde, 0x91, 0xd0, 0xc7,
	0x4c, 0xc8, 0xb7, 0xa1, 0x21, 0xbe, 0x4d, 0x3d, 0x7e, 0x8b, 0xce, 0x81, 0xf8, 0x82, 0x61, 0x4b,
	0x92, 0x16, 0x65, 0xa4, 0x0b, 0x46, 0xc0, 0xd2, 0xd5, 0x3a, 0x0b, 0x3b, 0x55, 0xa1, 0x66, 0xda,
	0x03, 0x49, 0x53, 0x2d, 0x20, 0xbf, 0x82, 0x63, 0x75, 0xa4, 0x61, 0x1a, 0x2f, 0xd6, 0xe2, 0x5a,
	0x35, 0x75, 0xad, 0xc1, 0x43, 0x09, 0xdd, 0x55, 0x26, 0x5f, 0x83, 0x5a, 0x12, 0xde, 0xac, 0x97,
	0x41, 0xc7, 0xd0, 0x77, 0x11, 0x24, 0x55, 0x6c, 0xf2, 0x5d, 0x80, 0x94, 0xcd, 0x97, 0x5e, 0xb6,
	0x4e, 0xc2, 0xb4, 0x63, 0x0a, 0x54, 0x1b, 0xf6, 0x34, 0x67, 0xd1, 0x82, 0xb8, 0xfb, 0xaf, 0x27,
	0x60, 0x28, 0x84, 0x09, 0x81, 0x83, 0x74, 0xb1, 0x9e, 0x63, 0x20, 0x4a, 0xaf, 0xeb, 0x54, 0x9c,
	0xd1, 0x9b, 0x29, 0x91, 0x71, 0x06, 0x0a, 0xf2, 0x8a, 0xed, 0x0c, 0x68, 0xce, 0x24, 0xdf, 0x07,
	0x33, 0x0a, 0x33, 0x2f, 0xf0, 0x32, 0x4f, 0xc1, 0x7b, 0xac, 0x23, 0x68, 0x5f, 0x2a, 0x01, 0xcd,
	0x55, 0xc8, 0xd7, 0xe1, 0x80, 0x65, 0x61, 0xa4, 0x70, 0x6c, 0xe5, 0xaa, 0x0e, 0x32, 0xa9, 0x10,
	0x91, 0x1e, 0x1c, 0xa6, 0xb7, 0x6c, 0xb5, 0x42, 0xf6, 0x78, 0xc5, 0x9f, 0x9c, 0x22, 0x9c, 0xfc,
	0x11, 0xcf, 0x72, 0xed, 0xe9, 0x96, 0x9c, 0x3e, 0xd4, 0x27, 0xbf, 0x80, 0x96, 0x66, 0xd1, 0xf5,
	0x02, 0x51, 0xa8, 0x89, 0x0f, 0x3c, 0xdd, 0xf9, 0x00, 0x97, 0xd2, 0x6d, 0x5d, 0xf2, 0x02, 0x2a,
	0x99, 0xf7, 0x56, 0xa1, 0xdb, 0xcc, 0x4d, 0x5c, 0xef, 0x2d, 0xe5, 0x02, 0xcc, 0x08, 0x03, 0xb3,
	0x7c, 0xc5, 0xef, 0x25, 0xc1, 0x3d, 0xcc, 0x75, 0xfa, 0x82, 0x4f, 0xb5, 0x1c, 0x3f, 0x05, 0x11,
	0x56, 0x42, 0xe2, 0x65, 0x71, 0x92, 0x76, 0xea, 0xa8, 0x5d, 0xa7, 0x05, 0x0e, 0xb1, 0x81, 0x64,
	0x61, 0x12, 0xa5, 0xbd, 0x65, 0x80, 0x49, 0x17, 0x30, 0xf9, 0x5a, 0x10, 0xf8, 0xef, 0x91, 0x60,
	0x86, 0x35, 0x65, 0x90, 0x27, 0xf1, 0x82, 0xf9, 0xf7, 0x9d, 0x86, 0xd0, 0xdc, 0xe2, 0x61, 0x99,
	0xb4, 0xd9, 0x12, 0xc3, 0x83, 0x0e, 0xee, 0xfb, 0xbc, 0x1a, 0x3b, 0x4d, 0xd4, 0xaa, 0xd2, 0x07,
	0x5c, 0xeb, 0x9f, 0x65, 0x30, 0x75, 0x80, 0x48, 0x07, 0x8c, 0xbb, 0x30, 0x49, 0x79, 0x32, 0xf2,
	0xe8, 0xb7, 0xa8, 0x26, 0xc9, 0x8f, 0xc1, 0xf4, 0xbd, 0x2c, 0x9c, 0xa3, 0x9d, 0x48, 0x80, 0xf6,
	0x89, 0xb5, 0x13, 0x5f, 0xbb, 0xaf, 0x34, 0x68, 0xae, 0x4b, 0x7e, 0x09, 0x0d, 0x7d, 0x9e, 0xae,
	0xaf, 0x45, 0x6a, 0xb4, 0x4f, 0x9e, 0x3f, 0x6e, 0x8a, 0x4a, 0xb4, 0x68, 0x41, 0xde, 0x87, 0x5a,
	0xf8, 0x76, 0xc5, 0xd0, 0x2d, 0xcf, 0x95, 0x03, 0xaa, 0xa8, 0xee, 0x07, 0xd0, 0x28, 0xd8, 0x90,
	0x1a, 0x94, 0x47, 0xbd, 0xa3, 0x2f, 0x91, 0x43, 0x68, 0x9c, 0x3a, 0xbf, 0x19, 0x0e, 0xae, 0x26,
	0xd4, 0xe9, 0x0f, 0x8f, 0x4a, 0xa4, 0x01, 0x46, 0x6f, 0xd6, 0x77, 0x9d, 0xf1, 0xe8, 0xa8, 0xdc,
	0x75, 0xc0, 0xd4, 0x46, 0x5c, 0x30, 0x1b, 0x9d, 0x8f, 0xc6, 0x1f, 0x8f, 0xd0, 0xec, 0x18, 0x5a,
	0x93, 0x37, 0x9f, 0x4c, 0x9d, 0x7e, 0xef, 0xe2, 0xea, 0x6c, 0x3c, 0x1e, 0xa0, 0xe1, 0x11, 0x34,
	0x07, 0xce, 0x99, 0xe3, 0x6a, 0x4e, 0x99, 0x5b, 0x4c, 0x87, 0xf4, 0x23, 0xfe, 0xdd, 0x8a, 0xf5,
	0xd7, 0x2a, 0x1c, 0xf0, 0x6c, 0x25, 0xef, 0x41, 0x35, 0x63, 0xd9, 0x22, 0x54, 0xf5, 0x22, 0x09,
	0xf2, 0x12, 0x1a, 0xd8, 0xfa, 0xfc, 0x84, 0x89, 0x54, 0x14, 0x90, 0xd5, 0x69, 0x91, 0xc5, 0x03,
	0x84, 0x8d, 0xd1, 0x0f, 0xd3, 0x14, 0x81, 0x70, 0x59, 0x14, 0x0a, 0x70, 0xea, 0xf4, 0x01, 0x97,
	0x9c, 0x40, 0x73, 0x95, 0x30, 0x3f, 0x9c, 0x84, 0xc9, 0x6c, 0xc9, 0x32, 0x55, 0x32, 0xed, 0x1c,
	0xc2, 0x09, 0x17, 0xd2, 0x2d, 0x1d, 0x5e, 0xc2, 0xcb, 0xf4, 0xe6, 0x33, 0xd1, 0x7f, 0x4c, 0x2a,
	0xce, 0x9c, 0x97, 0x79, 0x73, 0x59, 0x03, 0x58, 0xd6, 0xfc, 0x8c, 0x3d, 0xa2, 0xc6, 0x22, 0x6f,
	0x8e, 0x95, 0x61, 0x88, 0x14, 0x7e, 0xb2, 0x55, 0x88, 0xb6, 0xc3, 0x65, 0x54, 0xa9, 0x20, 0x20,
	0x95, 0xe9, 0xf9, 0x0c, 0x93, 0x9d, 0xdf, 0xb2, 0x92, 0x9e, 0xcf, 0x78, 0x6c, 0x3e, 0x0b, 0xd9,
	0xfc, 0x36, 0xc3, 0x9c, 0x2e, 0xbd, 0x2e, 0x53, 0x45, 0x91, 0xaf, 0x42, 0xdd, 0xd7, 0xd9, 0xaa,
	0xd2, 0x78, 0xc3, 0xc0, 0x6c, 0x37, 0x62, 0x55, 0xd0, 0x0d, 0xe1, 0xf5, 0xbd, 0x6d, 0xaf, 0xaa,
	0x9a, 0xb5, 0x92, 0xf5, 0xdf, 0x12, 0xd4, 0x24, 0xef, 0x0b, 0x63, 0xfd, 0x33, 0x6c, 0x5f, 0x5e,
	0x82, 0x73, 0x27, 0x4b, 0x11, 0x65, 0xee, 0xf3, 0xf9, 0x3e, 0x9f, 0xf6, 0x47, 0x4a, 0x89, 0xe6,
	0xea, 0xd6, 0x1f, 0xc0, 0xd4, 0x5c, 0x01, 0xab, 0x17, 0x69, 0xef, 0xe2, 0x8c, 0x6d, 0xa0, 0x2a,
	0xf0, 0x51, 0x6d, 0x71, 0x2f, 0x82, 0x52, 0x83, 0xfc, 0x08, 0x5a, 0x22, 0x4a, 0x97, 0x71, 0xc0,
	0x6e, 0x18, 0x0e, 0xaf, 0xca, 0xde, 0x50, 0x6e, 0x2b, 0x59, 0x3f, 0x81, 0xaa, 0xf8, 0x0a, 0xf7,
	0x7e, 0xeb, 0xa5, 0xb7, 0xda, 0x3b, 0x3f, 0x13, 0x0b, 0xcc, 0x1b, 0xb6, 0x08, 0x47, 0xfc, 0x56,
	0xf2, 0xdd, 0x39, 0x6d, 0xfd, 0xbb, 0x0c, 0xed, 0xed, 0x0e, 0x49, 0x7e, 0x8a, 0x39, 0x70, 0xbf,
	0x92, 0x0f, 0x68, 0x9f, 0xbc, 0x7a, 0xa4, 0x91, 0xe6, 0xa4, 0x8b, 0xba, 0x54, 0x58, 0x60, 0xb6,
	0x1a, 0x49, 0x38, 0x17, 0x41, 0x2b, 0x23, 0x80, 0x6d, 0xec, 0x88, 0x7d, 0x39, 0xe3, 0xfb, 0xd8,
	0xc7, 0xa8, 0x16, 0xa2, 0x87, 0x3c, 0xb8, 0x12, 0xe8, 0x17, 0x8f, 0x39, 0x79, 0x18, 0xe6, 0xbb,
	0x3c, 0xca, 0xd8, 0x85, 0xd2, 0x30, 0xb9, 0x43, 0x10, 0xd4, 0x5b, 0x35, 0x49, 0x5e, 0x41, 0x55,
	0x80, 0xa3, 0xc0, 0x7e, 0x88, 0x9c, 0x14, 0x92, 0xef, 0xc1, 0x71, 0x88, 0x6c, 0x9c, 0xdc, 0x61,
	0x30, 0x08, 0x17, 0x0c, 0x7b, 0xd8, 0xbd, 0x2a, 0xae, 0x5d, 0x41, 0xf7, 0x87, 0xd0, 0x2c, 0xbe,
	0x97, 0xd7, 0xfd, 0xc5, 0x98, 0xf7, 0x81, 0x89, 0xd3, 0x3f, 0x9f, 0x4d, 0xf6, 0xf4, 0x14, 0xeb,
	0xf3, 0xf2, 0xc6, 0x86, 0x0f, 0x0b, 0xf2, 0x73, 0x30, 0x13, 0xfc, 0xeb, 0x6e, 0xb0, 0x7d, 0xb1,
	0x77, 0xc6, 0xd8, 0x54, 0x69, 0xd1, 0x5c, 0xff, 0xff, 0x46, 0x16, 0x9b, 0x7e, 0xc4, 0x96, 0x2c,
	0x5a, 0x47, 0xd4, 0x5b, 0xce, 0x65, 0xb7, 0x68, 0xd1, 0x2d, 0x1e, 0x4f, 0x87, 0x08, 0xe7, 0x93,
	0x90, 0x1f, 0x08, 0x79, 0x4e, 0x6f, 0xb0, 0xab, 0xbe, 0x03, 0xbb, 0xee, 0x9f, 0x4a, 0x60, 0xea,
	0x4b, 0x92, 0xa7, 0x70, 0xfc, 0xeb, 0x59, 0x6f, 0xe4, 0x3a, 0xee, 0x27, 0x57, 0x03, 0x67, 0xda,
	0x1f, 0xcf, 0x46, 0x2e, 0xe2, 0xf1, 0x15, 0x78, 0x76, 0x7a, 0xd1, 0x73, 0xaf, 0x4e, 0x87, 0xc3,
	0xab, 0x5c, 0x4e, 0x7b, 0xa3, 0x33, 0xde, 0x6f, 0xbf, 0x0c, 0x4f, 0x73, 0xe1, 0xc7, 0x43, 0xe7,
	0xec, 0x8d, 0xab, 0x44, 0x65, 0x2e, 0xea, 0x8f, 0x2f, 0x3f, 0x74, 0x46, 0x08, 0xe5, 0xf4, 0x8d,
	0x33, 0x99, 0x38, 0xa3, 0xb3, 0xab, 0xde, 0x60, 0x70, 0x54, 0xc1, 0x09, 0x69, 0xed, 0x8a, 0xa6,
	0xb3, 0x0f, 0x5d, 0xda, 0xeb, 0xbb, 0x47, 0x07, 0xd6, 0x1f, 0x4b, 0x50, 0xc1, 0xc9, 0xcb, 0x53,
	0x03, 0x67, 0x6f, 0x8e, 0x33, 0xa6, 0x86, 0x22, 0x31, 0xe8, 0x80, 0x47, 0xfa, 0x0e, 0x24, 0x0b,
	0x72, 0xde, 0x32, 0x90, 0xd2, 0xa1, 0x11, 0x58, 0x9a, 0xb4, 0xc8, 0xe2, 0x33, 0x7b, 0x15, 0x26,
	0x3e, 0x8e, 0x4a, 0x4f, 0x81, 0x59, 0xa6, 0x05, 0x8e, 0xf5, 0x5b, 0xa8, 0xc9, 0x31, 0xff, 0x48,
	0x53, 0xd2, 0xd5, 0x5a, 0x2e, 0x54, 0xeb, 0x77, 0xc0, 0xc4, 0x45, 0x4e, 0xec, 0xc6, 0x8f, 0xd4,
	0x7e, 0x2e, 0xb7, 0x7a, 0x50, 0x15, 0x2c, 0x1e, 0x77, 0x7f, 0x9d, 0x24, 0xe1, 0xd2, 0x17, 0xcf,
	0x50, 0x5e, 0xb6, 0x78, 0xfc, 0x0a, 0x9b, 0xba, 0x28, 0xe9, 0x58, 0xfe, 0xa3, 0x06, 0x55, 0xb9,
	0x0b, 0xbf, 0x82, 0x96, 0x5c, 0x0e, 0x7a, 0x41, 0x80, 0xeb, 0x5e, 0xaa, 0x3e, 0xb2, 0xcd, 0xc4,
	0x69, 0x60, 0xea, 0x15, 0x48, 0x15, 0xd8, 0xa1, 0x5c, 0x91, 0x37, 0x39, 0x9c, 0x2b, 0x90, 0xe7,
	0x60, 0x88, 0xa5, 0x17, 0x17, 0xc2, 0xca, 0x66, 0x21, 0xd4, 0x3c, 0x3e, 0x02, 0xb0, 0xd0, 0xb0,
	0xda, 0xbc, 0x68, 0xa5, 0x26, 0xf7, 0x86, 0x81, 0xeb, 0x5f, 0x95, 0xef, 0x78, 0x7a, 0xa3, 0x6b,
	0x28, 0x37, 0x62, 0xfb, 0x93, 0x12, 0xf2, 0x1a, 0x8c, 0x95, 0x77, 0x1f, 0x21, 0xda, 0x6a, 0x2f,
	0x6e, 0x2b, 0xa5, 0x89, 0xe4, 0x52, 0x2d, 0xb6, 0xfe, 0x8e, 0x29, 0x9b, 0x87, 0x0d, 0x47, 0x12,
	0xbf, 0xa2, 0x1b, 0xab, 0x27, 0x2a, 0x8a, 0x27, 0x8e, 0xa7, 0xde, 0x2e, 0x23, 0xa2, 0x49, 0x1e,
	0x28, 0x9f, 0x65, 0xba, 0x41, 0x88, 0x33, 0xc7, 0x13, 0x2f, 0x9a, 0xc9, 0xb8, 0x63, 0x48, 0x05,
	0x21, 0x52, 0x22, 0xc6, 0xe3, 0x42, 0xc4, 0xa1, 0x2a, 0x44, 0x05, 0x0e, 0xaf, 0x64, 0xf5, 0xbb,
	0x47, 0x5c, 0x79, 0xa7, 0x92, 0x95, 0xd0, 0xfa, 0x5b, 0x49, 0xad, 0x0e, 0x98, 0x85, 0x0b, 0x19,
	0xfe, 0x37, 0xba, 0xb1, 0x37, 0x69, 0x91, 0xc5, 0x0b, 0xfa, 0x77, 0x6b, 0x9c, 0x3d, 0xfc, 0x82,
	0x65, 0x59, 0xd0, 0x9a, 0xc6, 0x8c, 0x7f, 0xd0, 0x6a, 0x49, 0x01, 0xc6, 0x9d, 0xf6, 0x7a, 0x92,
	0xb7, 0xd7, 0x7d, 0x53, 0x0c, 0x1f, 0x7c, 0xe7, 0x2d, 0xd6, 0x7a, 0x88, 0x48, 0xc2, 0xfa, 0xbc,
	0x04, 0x86, 0x82, 0x1b, 0x17, 0xfc, 0x1a, 0x6e, 0xef, 0xb7, 0x71, 0xa0, 0x1a, 0xdc, 0xd3, 0xed,
	0x70, 0xf0, 0x4d, 0x0e, 0x85, 0x54, 0x29, 0xf1, 0xf8, 0xe7, 0x0b, 0xae, 0xfa, 0xe8, 0x86, 0xc1,
	0xa3, 0xe4, 0x45, 0x79, 0x19, 0xb4, 0xa8, 0xa2, 0xc4, 0xe2, 0x70, 0xeb, 0xb1, 0x25, 0xff, 0xdd,
	0xa8, 0xb0, 0xdf, 0x30, 0x8a, 0x31, 0xac, 0x6e, 0xc7, 0x50, 0x2c, 0xc4, 0x41, 0x18, 0x46, 0x53,
	0x31, 0xf2, 0x05, 0xfc, 0x62, 0x21, 0xde, 0xf0, 0xba, 0xdf, 0x80, 0x9a, 0xbc, 0x23, 0x01, 0xa8,
	0x0d, 0x1c, 0x3a, 0xec, 0xf3, 0x5e, 0xd6, 0x82, 0xfa, 0xe5, 0x78, 0x30, 0xa4, 0x3d, 0x77, 0x88,
	0x4b, 0x5f, 0xf7, 0x09, 0x1c, 0xef, 0xfc, 0xf6, 0xeb, 0x9a, 0x50, 0x93, 0x3f, 0xed, 0xba, 0x75,
	0x30, 0xd4, 0x8f, 0x33, 0xae, 0xb9, 0xf3, 0x3b, 0x4d, 0x68, 0x8a, 0x92, 0xea, 0xfe, 0xa5, 0x04,
	0x65, 0x2c, 0x03, 0xc4, 0x7a, 0xbe, 0x66, 0x81, 0xc6, 0x9a, 0x9f, 0xf9, 0x65, 0xaf, 0x17, 0xb1,
	0xff, 0xa9, 0x78, 0x98, 0xfa, 0x3d, 0x85, 0x97, 0x2d, 0xf2, 0xc8, 0x37, 0x31, 0xfb, 0xd7, 0xd7,
	0x9f, 0x86, 0xf7, 0xa9, 0xaa, 0xae, 0x06, 0x56, 0x97, 0x3d, 0x91, 0x2c, 0xaa, 0x65, 0xb8, 0x1b,
	0x18, 0x8a, 0xb7, 0xe5, 0xa9, 0xa9, 0x3c, 0x21, 0x60, 0xd7, 0x2c, 0xf3, 0x63, 0x26, 0x97, 0xa2,
	0x26, 0xd5, 0x64, 0xf7, 0x3f, 0x25, 0x80, 0xcd, 0x4f, 0x41, 0x0c, 0x2e, 0x8e, 0x58, 0x3f, 0xd3,
	0x7b, 0x7f, 0x1b, 0xd7, 0x98, 0x8d, 0xd4, 0x9e, 0x4a, 0x11, 0xd5, 0x3a, 0xb9, 0xaf, 0xf2, 0x7e,
	0x5f, 0x95, 0x6d, 0x5f, 0xbf, 0xc7, 0xb5, 0x59, 0x19, 0xea, 0x2d, 0x1d, 0x37, 0xe9, 0x0b, 0x67,
	0xea, 0x62, 0x93, 0xc7, 0x89, 0x51, 0xc7, 0x2e, 0x45, 0x31, 0x04, 0x38, 0x21, 0xde, 0x07, 0x22,
	0x8e, 0x57, 0xfd, 0xf1, 0xe8, 0xd4, 0xa1, 0x97, 0x3d, 0xb1, 0xb7, 0x57, 0x78, 0xc4, 0x30, 0x42,
	0x5c, 0xfd, 0x80, 0xdb, 0xe2, 0x2c, 0x9a, 0xcc, 0xdc, 0xe1, 0x51, 0x95, 0x1b, 0x28, 0xe2, 0x8a,
	0x0e, 0xa7, 0xe3, 0x8b, 0x99, 0x30, 0xa8, 0x09, 0x83, 0xe1, 0xe9, 0x6c, 0x34, 0x38, 0x32, 0xae,
	0x6b, 0xe2, 0xff, 0x0f, 0x1f, 0xfc, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x05, 0x17, 0x9c, 0x9c, 0xa6,
	0x10, 0x00, 0x00,
}
