swagger: '2.0'
schemes:
  - http
  - https
host: localhost:8080
basePath: /
info:
  description: |
    # Introduction
    The OpenBazaar networking daemon combines a Kademlia DHT, IPFS node, Bitcoin wallet, and a peer-to-peer contracting system. This JSON API is the primary mechanism for controlling the node. It offers a RESTful api for building user interfaces as well as a number of RPC calls. In this documentation you'll find a full list of API calls and example usages.
   
    # Authentication
    When running on localhost (the default), the API is unauthenticated. You can enable authentication by setting the config file as follows: 
    ```
     {
        "JSON-API": {
          "Authenticated": true
          }
     }
    ```
    Note that on mainnet the server enables authentication automatically if the gateway url is bound to anything other than localhost (implying open internet access) even if the config file is set to false.
    
    There are two ways for a client to authenticate. The default (and preferred) is via an authentication cookie. On start up the server generates a random cookie and saves it in the data directory as a .cookie file. You need to add this cookie to the header of all requests. For example:
    ```
    cookie: OpenBazaar_Auth_Cookie=2Yc7VZtG/pVKrH5Lp0mKRSEPC4xlm1dGpkbUXLehTUI
    ```

    Alternatively, you can use basic authentication by setting a username and password in the config file:
    ```
         {
            "JSON-API": {
              "Username": "Aladdin",
              "Password": "OpenSesame"
              }
         }
    ```
    The username and password need to be included in the request header following [RFC 2617](https://www.ietf.org/rfc/rfc2617.txt):
    ```
    Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==
    ```
    Where the username and password are encoded as `base64encode(username + ":" + password)`

    or included in the Url:
    ```
    http://username:password@localhost:8080/ob/
    ```

    # SSL
    **NEVER** open the JSON API to the internet without also encrypting the connection with SSL. Without SSL enabled the cookie will be sent to the server in the clear allowing anyone who views your packets to access your server and potentially steal your bitcoins. For instructions on how to enable SSL, see [here](https://github.com/OpenBazaar/openbazaar-go/blob/master/docs/ssl.md).
    
    # Cross-Origin Resource Sharing
    CORS is turned off by default, meaning that you will not be able to make API calls from a browser to a running server on localhost. You can turn CORS on by setting the config file as follows:
     ```
     {
        "JSON-API": {
          "CORS": true
          }
     }
    ```
    Keep in mind that running the server with CORS enabled is a potential secrity risk as it will allow any website you visit to make calls to your server. Authentication should be enabled along side CORS.

  version: 1.0.0
  title: OpenBazaar JSON API
  termsOfService: There are no TOS at this moment, use at your own risk we take no responsibility.
  contact:
    email: project@openbazaar.org
    url: https://openbazaar.org
  x-logo:
    url: 'https://openbazaar.org/assets/img/icon-large.png'
  license:
    name: MIT
    url: 'http://opensource.org/licenses/MIT'
tags:
  - name: Profile
    description: API calls for setting and viewing profile data
  - name: Images
    description: Image upload API calls
  - name: Settings
    description: API calls for setting mostly UI specific setting variables
  - name: Following
    description: All API calls related to following and getting lists of following/followed peers
  - name: Moderator
    description: API calls for moderation
  - name: Inventory
    description: API calls for managing inventory
  - name: Peers
    description: RPC calls finding other peers
  - name: Wallet
    description: Bitcoin wallet RPC calls
  - name: IPFS
    description: IPFS gateway API
  - name: Misc
    description: Miscellaneous API calls
securityDefinitions:
  api_key:
    type: apiKey
    name: autoCookie
    in: header
paths:
  /ipfs/{hash}/:
    get:
      tags:
          - IPFS
      summary: Fetch file from IPFS
      description: This API call will query the DHT using the given hash to get a list of peers who are seeding the file. Depending on the size of the file it will then download it from one or more of them. 
        The hash may be a directory. In which case this API returns an HTML directory view. To view the files inside the directory, you can add either add their filename or hash to the query. For example...
        ```
        ipfs/QmecpJrN9RJ7smyYByQdZUy5mF6aapgCfKLKRmDtycv9aG/some_image.jpg
        ipfs/QmecpJrN9RJ7smyYByQdZUy5mF6aapgCfKLKRmDtycv9aG/QmamudHQGtztShX7Nc9HcczehdpGGWpFBWu2JvKWcpELxr
        ```
        And of course nested directories are also supported, referenced again by a name or hash.
        ```
        ipfs/QmecpJrN9RJ7smyYByQdZUy5mF6aapgCfKLKRmDtycv9aG/my_directory/some_image.jpg
        ipfs/QmecpJrN9RJ7smyYByQdZUy5mF6aapgCfKLKRmDtycv9aG/QmamudHQGtztShX7Nc9HcczehdpGGWpFBWu2JvKWcpELxr/some_image.jpg
        ```
      operationId: IPFS
      parameters:
        - name: hash
          in: path
          description: A base58 encoded multihash
          required: true
          type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/IPFSResponse'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/IPFSResponse'  
  /ipns/{peerId}/:
    get:
      tags:
          - IPFS
      summary: Fetch file from IPNS
      description: The IPNS protocol allows for a user to map their peer ID to an IPFS hash in a cryptographically secure manner. When an IPNS query is made, the server first queries the DHT to resolve the peer ID into an IPFS hash, then proceeds to make an IPFS query given the resolved hash. For example, suppose we have the following mapping..
        ```
        {peerId} = {hash}
        ```
        Then the following API calls are equal...
        ```
        ipfs/{hash}/some_image.jpg
        ipns/{peerId}/some_image.jpg
        ```
      operationId: IPNS
      parameters:
        - name: peerId
          in: path
          description: A base58 encoded multihash peer ID or a blockchain ID.
          required: true
          type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/IPFSResponse'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/IPFSResponse'  
  /ob/follow:
    post:
      tags:
        - Following
      summary: Follow a peer
      description: RPC call to follow another peer on the network.
      operationId: Follow
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Follow object containing a peer ID.
          required: true
          schema:
            $ref: '#/definitions/Follow'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/DefaultResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
  /ob/unfollow:
    post:
      tags:
        - Following
      summary: Unfollow a peer
      description: RPC call to unfollow another peer on the network.
      operationId: Unfollow
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Unfollow object containing a peer ID.
          required: true
          schema:
            $ref: '#/definitions/Follow'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/DefaultResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
  /ob/followers:
    get:
      tags:
        - Following
      summary: Get a list of your followers
      description: Returns a list of peers IDs that follow you
      operationId: GetFollowers
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: query
          name: offsetId
          description: Return all peer IDs after this ID
          required: false
          type: string
        - in: query
          name: limit
          description: Number of peer IDs to return
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/FollowResponse'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
  /ob/following:
    get:
      tags:
        - Following
      summary: Get a list of peers you are following.
      description: Returns a list of peer IDs you are following
      operationId: GetFollowing
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: query
          name: offsetId
          description: Return all peer IDs after this ID
          required: false
          type: string
        - in: query
          name: limit
          description: Number of peer IDs to return
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/FollowResponse'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse' 
  /ob/followsme/{peerId}:
    get:
      tags:
        - Following
      summary: Does <peer> follow me?
      description: Returns true if the given peer follows you
      operationId: FollowsMe
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: peerId
          in: path
          description: The base58 encoded peer ID
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/FollowsMeResponse'
  /ob/isfollowing/{peerId}:
    get:
      tags:
        - Following
      summary: Am I following <peer>?
      description: Returns true if you're following the given peer
      operationId: IsFollowing
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: peerId
          in: path
          description: The base58 encoded peer ID
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/IsFollowingResponse'
  /ob/profile:
    post:
      tags:
        - Profile
      summary: Set the profile
      description: Set the profile for this node
      operationId: PostProfile
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Profile object
          required: true
          schema:
            $ref: '#/definitions/Profile'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Profile'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: Conflict
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
    put:
      tags:
        - Profile
      summary: Update the profile
      description: Update the profile for this node
      operationId: PutProfile
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Profile object
          required: true
          schema:
            $ref: '#/definitions/Profile'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Profile'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'  
  /ipns/{peerId}/profile:
    get:
      tags:
          - Profile
      summary: Get a profile
      description: Get a profile for a node given the peer ID.
      operationId: GetProfile
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: peerId
          in: path
          description: The base58 encoded peer ID. Use own peer ID to get own profile.
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Profile'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/IPFSResponse'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/IPFSResponse'  
  /ob/settings:
    post:
      tags:
        - Settings
      summary: Set settings
      description: Set the settings object in the database
      operationId: PostSettings
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Settings object
          required: true
          schema:
            $ref: '#/definitions/Settings'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/DefaultResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: Conflict
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
    put:
      tags:
        - Settings
      summary: Update settings
      description: Update the settings object in the database. Overwrites all fields.
      operationId: PutSettings
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Settings object
          required: true
          schema:
            $ref: '#/definitions/Settings'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/DefaultResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
    patch:
      tags:
        - Settings
      summary: Patch settings
      description: Update individual settings without overwriting the rest. 
      operationId: PatchSettings
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Settings object with only those fields set which should be updated.
          required: true
          schema:
            $ref: '#/definitions/Settings'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/DefaultResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
    get:
      tags:
        - Settings
      summary: Get the settings
      description: Fetch the settings from the database 
      operationId: GetSettings
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Settings'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'   
  /wallet/address:
    get:
      tags:
        - Wallet
      summary: Get a bitcoin address
      description: Returns an unused bitcoin address. Note the same address is returned until the address is used. 
      operationId: GetBitcoinAddress
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Address'    
  /wallet/mnemonic:
    get:
      tags:
        - Wallet
      summary: Get the mnemonic seed
      description: Returns the mnemonic seed used to derive all the bitcoin keys. Note this seed should never be disclosed as it will allow someone to drain your wallet and steal your OpenBazaar identity.
      operationId: GetMnemonic
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Mnemonic'   
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'   
  /wallet/balance:
    get:
      tags:
        - Wallet
      summary: Get the wallet's balance
      description: Returns the unconfirmed and confirmed balances of the wallet in satoshi (1/100000000 of a full bitcoin).
      operationId: GetBalance
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Balance'    
  /wallet/spend:
    post:
      tags:
        - Wallet
      summary: Send bitcoins
      description: Send bitcoins to someone. Note the feelLevel parameter controls how much of a fee to use. By default the wallet will query a fee api to get the appropriate fee-per-byte for the given level. There is a max fee value in the config file. If the api returns more than the max, then a default fee will be used. The default values, max values, and api can be configured in the config file. If you do not wish to use a fee api, and just want to use the default value, set the fee api to "".
      operationId: SpendBitcoins
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Spend object
          required: true
          schema:
            $ref: '#/definitions/Spend'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/DefaultResponse'  
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
  /wallet/resyncblockchain:
    post:
      tags:
        - Wallet
      summary: Re-sync blockchain
      description: RPC call to re-download the blocks in the blockchain. It is theoretically possible that the wallet could fail to hear of a transaction intended for itself if its peers fail to relay a transaction. In such cases the recourse is to re-download the historical blocks from a new peer to discover the missing transaction(s).
      operationId: ResyncBlockchain
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/DefaultResponse'  
  /ob/peers:
    get:
      tags:
        - Peers
      summary: Get connected peers
      description: Returns a list of IDs of the peers connected to this node.
      operationId: GetPeers
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Peers'  
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
  /ob/status/{peerId}:
    get:
      tags:
        - Peers
      summary: Get peer online status
      description: Pings the peer and returns if it is online or not
      operationId: PeerStatus
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: peerId
          in: path
          description: The base58 encoded peer ID.
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Status'  
  /ob/closestpeers/{peerId}:
    get:
      tags:
        - Peers
      summary: Crawl for closest peers
      description: Crawls the DHT and returns up to 20 of the closest peers to the given ID.
      operationId: GetClosestPeers
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: peerId
          in: path
          description: The base58 encoded peer ID.
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Peers'  
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
  /ob/avatar:
    post:
      tags:
        - Images
      summary: Set the avatar
      description: Set the avatar image. This will also update the avatar hash in the profile.
      operationId: PostAvatar
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Avatar object includes a base64 encoded image
          required: true
          schema:
            $ref: '#/definitions/Avatar'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/DefaultResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
  /ipns/{peerId}/avatar:
    get:
      tags:
        - Images
      summary: Get avatar
      description: Get the avatar image for a peer. Use own peer ID to get own avatar.
      operationId: GetAvatar
      parameters:
        - name: peerId
          in: path
          description: The base58 encoded peer ID.
          required: true
          type: string
      responses:
        '200':
          description: OK
  /ob/header:
    post:
      tags:
        - Images
      summary: Set the header
      description: Set the header image. This will also update the header hash in the profile.
      operationId: PostHeader
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Header object includes a base64 encoded image
          required: true
          schema:
            $ref: '#/definitions/Header'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/DefaultResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
  /ipns/{peerId}/header:
    get:
      tags:
        - Images
      summary: Get header
      description: Get the header image for a peer. Use own peer ID to get own header.
      operationId: GetHeader
      parameters:
        - name: peerId
          in: path
          description: The base58 encoded peer ID.
          required: true
          type: string
      responses:
        '200':
          description: OK
  /ob/images:
    post:
      tags:
        - Images
      summary: Upload images
      description: Upload one or more images. Returns the IPFS hash of each image which can be used to fetch the image using the IPFS API call.
      operationId: PostImage
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: List of image objects which include a base64 encoded image
          required: true
          schema:
            $ref: '#/definitions/Images'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ImageResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
  /ob/moderator:
    post:
      tags:
        - Moderator
      summary: Set as moderator
      description: Make this node as a moderator and set the modertor's information.
      operationId: PostModerator
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Moderator object
          required: true
          schema:
            $ref: '#/definitions/Moderator'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/DefaultResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: Conflict
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
    put:
      tags:
        - Moderator
      summary: Update moderator info
      description: Update the moderation info for this node
      operationId: PutModerator
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Moderator object
          required: true
          schema:
            $ref: '#/definitions/Moderator'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/DefaultResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      tags:
        - Moderator
      summary: Unset moderator
      description: Unset self as moderator and delete moderation info
      operationId: DeleteModerator
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/DefaultResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
  /ipns/{peerId}/moderation:
    get:
      tags:
          - Moderator
      summary: Get moderator info
      description: Fetch moderator info from IPFS
      operationId: GetModerator
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: peerId
          in: path
          description: The base58 encoded peer ID. Use own peer ID to get own moderation info.
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Moderator'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/IPFSResponse'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/IPFSResponse'  
  /ob/inventory:
    post:
      tags:
        - Inventory
      summary: Set inventory levels
      description: Set the inventory for a given item. The item format must be /slug/variant/...
      operationId: PostInventory
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Inventory object
          required: true
          schema:
            $ref: '#/definitions/Inventory'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/DefaultResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
    get:
      tags:
        - Inventory
      summary: Get all inventory
      description: Get a list of all inventory counts
      operationId: GetInventory
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/InventoryList'
  /ob/config:          
    get:
      tags:
       - Misc
      summary: Get node configuration
      description: Returns the node's own peer ID and the type of cryptocurrency used.
      operationId: GetConfig
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Config'
  /ob/exchangerate/{currencyCode}:          
    get:
      tags:
        - Misc
      summary: Get exchange rates
      description: Returns the exchange rate (per BTC) for the given fiat currency
      operationId: Get
      consumes:
        - application/json
      produces:
        - text/plain
      parameters:
        - name: currencyCode
          in: path
          description: The fiat currency code
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ExchangeRate'
definitions:
  DefaultResponse:
    type: object
  ErrorResponse:
    type: object
    example: {
        "success": false,
        "reason": "Error unmarshalling json"
    }
    properties:
      success:
        type: boolean
        example: false
      reason:
        type: string
        example: "Error unmarshalling json"
  IPFSResponse:
    type: string
  ImageResponse:
    type: array
    example: [
        {
          "filename": "blue_tshirt.jpg",
          "hash": "QmamudHQGtztShX7Nc9HcczehdpGGWpFBWu2JvKWcpELxr"
        }
    ]
    items:
      type: object
      properties:
        filename:
          description: The name of this file
          type: string
          example: "blue_tshirt.jpg"
        hash:
          description: The IPFS hash of the file. Base58 encoded multihash.
          type: string
          example: "QmamudHQGtztShX7Nc9HcczehdpGGWpFBWu2JvKWcpELxr"
  Images:
    description: A list of image objects
    type: array
    example: [
        {
          "filename": "blue_tshirt.jpg",
          "image": "/9j/4AAQSkZJRgABAQEASABIAAD/2wBDAAUDBAQEAwUEBAQFBQUGBwwIBwcHBw8LCwkMEQ8SEhEPERETFhwXExQaFRERGCEYGh0dHx8fExciJCIeJBweHx7/2wBDAQUFBQcGBw4ICA4eFBEUHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh7/wgARCAFoAeADASIAAhEBAxEB/8QAHAAAAQUBAQEAAAAAAAAAAAAAAwACBAUGBwEI/8QAGQEAAwEBAQAAAAAAAAAAAAAAAAECAwQF/9oADAMBAAIQAxAAAAHYO8XkdIooaxZ26gT3JCAJQdrWot77LakqjbJjJpDdnR/YymZkyBbWvATfKdPDu66YqYo/d8fHFZLA1ldVSDRZdxsa6xppI7gSoE2R4toohwLUlKSMVrFmSXufn1lxFFJG5Cq5LSan+1g13jJDFzrzXRuzs5aWhBHzsjwOFk+jc8696OXG7mqFiSz6cFrFX+M75o/n3ob97S5doMvOyo1jNx2ZNbE0tMWu5j0nJOpMxqNSxw5I7WixnTOd6HtjA6ul899p551/U4NotRmcjaYt+ogylnIo4L6MxkOh6TW67sXGL3EdQyKht7zZPUrQ8+ZdWUC1xVFCvqbsLSFI1WEUFfFmZRN1XJ+u9eoudX9Fm9GcB/PB+esrpzvXuQ9e78OPWdZZtaywr6PVYHvvzr9FB87/AER8+/QUnz=="
        }
    ]
    items:
      type: object
      required: ["filename", "image"]
      properties:
        filename:
          description: Name of the image file. The same name will be used when saving in the repo.
          type: string
          example: "blue_shirt.jpg"
        image:
          description: A base64 encoded image
          type: string
          example: "/9j/4AAQSkZJRgABAQEASABIAAD/2wBDAAUDBAQEAwUEBAQFBQUGBwwIBwcHBw8LCwkMEQ8SEhEPERETFhwXExQaFRERGCEYGh0dHx8fExciJCIeJBweHx7/2wBDAQUFBQcGBw4ICA4eFBEUHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh7/wgARCAFoAeADASIAAhEBAxEB/8QAHAAAAQUBAQEAAAAAAAAAAAAAAwACBAUGBwEI/8QAGQEAAwEBAQAAAAAAAAAAAAAAAAECAwQF/9oADAMBAAIQAxAAAAHYO8XkdIooaxZ26gT3JCAJQdrWot77LakqjbJjJpDdnR/YymZkyBbWvATfKdPDu66YqYo/d8fHFZLA1ldVSDRZdxsa6xppI7gSoE2R4toohwLUlKSMVrFmSXufn1lxFFJG5Cq5LSan+1g13jJDFzrzXRuzs5aWhBHzsjwOFk+jc8696OXG7mqFiSz6cFrFX+M75o/n3ob97S5doMvOyo1jNx2ZNbE0tMWu5j0nJOpMxqNSxw5I7WixnTOd6HtjA6ul899p551/U4NotRmcjaYt+ogylnIo4L6MxkOh6TW67sXGL3EdQyKht7zZPUrQ8+ZdWUC1xVFCvqbsLSFI1WEUFfFmZRN1XJ+u9eoudX9Fm9GcB/PB+esrpzvXuQ9e78OPWdZZtaywr6PVYHvvzr9FB87/AER8+/QUnz=="
  ExchangeRate:
    type: integer
    example: 620.54
  Status:
    description: A peer status object
    type: object
    required: ["status"]
    properties:
      status:
        description: Whether the peer is online or offline
        enum: ["online", "offline"]
        type: string
        example: "online"
  Follow:
    description: A json object containing a peer ID
    type: object
    required: ["id"]
    properties:
      id:
        description: Base58 encoded multihash
        type: string
        example: "QmamudHQGtztShX7Nc9HcczehdpGGWpFBWu2JvKWcpELxr"
  FollowResponse:
    description: A json list of Peer IDs
    type: array
    example: [
      "QmecpJrN9RJ7smyYByQdZUy5mF6aapgCfKLKRmDtycv9aG",  
      "QmamudHQGtztShX7Nc9HcczehdpGGWpFBWu2JvKWcpELxr",
      "QmPDLS7TV9Q3gtxRXQVqrm2RpEtz1Mq6u2YGeuEJWCqu6B"
    ]
    items:
      type: string
  FollowsMeResponse:
    type: object
    properties:
      followsMe:
        type: boolean
        example: false
  IsFollowingResponse:
    type: object
    properties:
      isFollowing:
        type: boolean
        example: false
  Peers:
    description: A list of peer IDs
    type: array
    example: [
      "QmecpJrN9RJ7smyYByQdZUy5mF6aapgCfKLKRmDtycv9aG",  
      "QmamudHQGtztShX7Nc9HcczehdpGGWpFBWu2JvKWcpELxr",
      "QmPDLS7TV9Q3gtxRXQVqrm2RpEtz1Mq6u2YGeuEJWCqu6B"
    ] 
    items:
      type: string
  Address:
    description: Bitcoin address object
    type: object
    properties:
      address:
        description: An unused bitcoin address
        type: string
        example: "1HYhu8e2wv19LZ2umXoo1pMiwzy2rL32UQ"
  Mnemonic:
    description: Mnemonic seed object
    type: object
    properties:
      mnemonic:
        description: A twelve-word mnemonic seed
        type: string
        example: "spot piano symbol news risk zero maze exchange repeat matrix whisper learn"
  Avatar:
    description: Avatar image object
    type: object
    properties:
      avatar:
        description: A base64 encoded image
        type: string
        example: "/9j/4AAQSkZJRgABAQEASABIAAD/2wBDAAUDBAQEAwUEBAQFBQUGBwwIBwcHBw8LCwkMEQ8SEhEPERETFhwXExQaFRERGCEYGh0dHx8fExciJCIeJBweHx7/2wBDAQUFBQcGBw4ICA4eFBEUHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh7/wgARCAFoAeADASIAAhEBAxEB/8QAHAAAAQUBAQEAAAAAAAAAAAAAAwACBAUGBwEI/8QAGQEAAwEBAQAAAAAAAAAAAAAAAAECAwQF/9oADAMBAAIQAxAAAAHYO8XkdIooaxZ26gT3JCAJQdrWot77LakqjbJjJpDdnR/YymZkyBbWvATfKdPDu66YqYo/d8fHFZLA1ldVSDRZdxsa6xppI7gSoE2R4toohwLUlKSMVrFmSXufn1lxFFJG5Cq5LSan+1g13jJDFzrzXRuzs5aWhBHzsjwOFk+jc8696OXG7mqFiSz6cFrFX+M75o/n3ob97S5doMvOyo1jNx2ZNbE0tMWu5j0nJOpMxqNSxw5I7WixnTOd6HtjA6ul899p551/U4NotRmcjaYt+ogylnIo4L6MxkOh6TW67sXGL3EdQyKht7zZPUrQ8+ZdWUC1xVFCvqbsLSFI1WEUFfFmZRN1XJ+u9eoudX9Fm9GcB/PB+esrpzvXuQ9e78OPWdZZtaywr6PVYHvvzr9FB87/AER8+/QUnz=="
  Header:
    description: Header image object
    type: object
    properties:
      header:
        description: A base64 encoded image
        type: string
        example: "/9j/4AAQSkZJRgABAQEASABIAAD/2wBDAAUDBAQEAwUEBAQFBQUGBwwIBwcHBw8LCwkMEQ8SEhEPERETFhwXExQaFRERGCEYGh0dHx8fExciJCIeJBweHx7/2wBDAQUFBQcGBw4ICA4eFBEUHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh7/wgARCAFoAeADASIAAhEBAxEB/8QAHAAAAQUBAQEAAAAAAAAAAAAAAwACBAUGBwEI/8QAGQEAAwEBAQAAAAAAAAAAAAAAAAECAwQF/9oADAMBAAIQAxAAAAHYO8XkdIooaxZ26gT3JCAJQdrWot77LakqjbJjJpDdnR/YymZkyBbWvATfKdPDu66YqYo/d8fHFZLA1ldVSDRZdxsa6xppI7gSoE2R4toohwLUlKSMVrFmSXufn1lxFFJG5Cq5LSan+1g13jJDFzrzXRuzs5aWhBHzsjwOFk+jc8696OXG7mqFiSz6cFrFX+M75o/n3ob97S5doMvOyo1jNx2ZNbE0tMWu5j0nJOpMxqNSxw5I7WixnTOd6HtjA6ul899p551/U4NotRmcjaYt+ogylnIo4L6MxkOh6TW67sXGL3EdQyKht7zZPUrQ8+ZdWUC1xVFCvqbsLSFI1WEUFfFmZRN1XJ+u9eoudX9Fm9GcB/PB+esrpzvXuQ9e78OPWdZZtaywr6PVYHvvzr9FB87/AER8+/QUnz=="
  Balance:
    description: Wallet balance object
    type: object
    properties:
      confirmed:
        description: The confirmed balance in satoshi
        type: integer
        example: 25000000
      unconfirmed:
        description: The unconfirmed balance in satoshi
        type: integer
        example: 1700000
  Inventory:
    description: Inventory object
    type: object
    example: {
        "slug": "/cool_tshirt/red/xl",
        "quantity": 17
    }
    required: ["slug", "quantity"]
    properties:
      slug:
        description: A full inventory path containing variants
        type: string
        example: "/cool_tshirt/red/xl"
      quantity:
        description: The amount in stock. Use -1 for unlimited inventory.
        type: integer
        example: 17
  InventoryList:
    description: A list of inventory objects
    type: array
    example: [
        {
           "slug": "/cool_tshirt/red/xl",
           "quantity": 17,
        },
        {
          "slug": "/cool_tshirt/yelow/small",
           "quantity": 9,
        }
    ]
    items: 
      $ref: '#/definitions/Inventory'
  Config:
    description: Config object
    type: object
    example: {
        "guid": "QmPDLS7TV9Q3gtxRXQVqrm2RpEtz1Mq6u2YGeuEJWCqu6B",
        "cryptoCurrency": "btc"
    }
    properties:
      guid:
        description: The node's own peer ID
        type: string
        example: "QmPDLS7TV9Q3gtxRXQVqrm2RpEtz1Mq6u2YGeuEJWCqu6B"
      cryptoCurrency:
        description: The type of cryptocurrency implemented by this node
        type: string
        example: "btc"
  Spend:
    description: Wallet spend object
    type: object
    required: ["address", "amount", "feeLevel"]
    properties:
      address:
        description: A base58check encoded bitcoin address to send coins to
        type: string
        example: "1HYhu8e2wv19LZ2umXoo1pMiwzy2rL32UQ"
      amount:
        description: The amount to send in satoshi
        type: integer
        example: 1700000
      feeLevel:
        description: The fee level to use
        enum: [ "PRIORITY", "NORMAL", "ECONOMIC" ]
        type: string
        example: "NORMAL"
  Moderator:
    description: Moderator object
    type: object
    required: ["description", "termsAndConditions", "languages", "fee"]
    example: {
        "description": "Long time OpenBazaar moderator located in Chicago",
        "termsAndConditions": "Will moderate anything and everything",
        "languages": [
          "English",
          "Spanish"
        ],
        "fee": {
            "feeType": "FIXED_PLUS_PERCENTAGE",
            "fixedFee": {
                "currencyCode": "USD",
                "amount": 300
            },
            "percentage": 5.0
        },
        "pubKey": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU="
    }
    properties:
      description:
        description: A description of the type of service offered
        type: string
        example: "Long time OpenBazaar moderator located in Chicago"
      termsAndConditions:
        description: Moderators terms and conditions
        type: string
        example: "Will moderate anything and everything"
      languages:
        description: A list of languages spoken by this moderator
        type: array
        example: ["English", "Spanish"]
        items:
          description: Language
          type: string
          example: "English"
      fee:
        description: The fee charged by the moderator. The fixedFee object is only included in types FIXED FEE and FIXED_PLUS_PERCENTAGE
        type: object
        properties:
          fixedFee:
            description: Represents a fixed fee price. Should only be included with types FIXED FEE and FIXED_PLUS_PERCENTAGE.
            type: object
            properties:
              currencyCode:
                description: The currency used for pricing
                type: string
                example: "USD"
              amount:
                description: The amount. If the currencyCode is bitcoin the amount should be satoshis. If it's fiat currency then the amount should have the decimal place moved two places to the right. For example.. 300 = $3.00
                type: integer
                example: 3000
          percentage: 
            description: The fee as a percentage. Only include this if the type is PERCENTAGE.
            type: integer
            example: 10.00
          feeType:
            description: The fee type enum
            type: string
            enum: ["FIXED", "PERCENTAGE", "FIXED_PLUS_PERCENTAGE"]
      pubKey:
        description: the moderator's bitcoin public key in base64. This field is automatically added by the server.
        type: string
        example: "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU="
  Profile:
    description: "Profile object"
    type: object
    required: ["name"]
    properties:
      handle:
        description: "Optional blockchainID. Profile will be rejected if the handle doesn't validate to this node's peer ID."
        type: string
        example: "@UrbanArt"
      name:
        description: "User's name"
        type: string
        example: "Urban Art"
      location:
        description: "Optional location data for this user"
        type: string
        example: "Chicago, Illinois"
      about:
        description: "About section text"
        type: string
        example: "We love spray painting and street art and this is the best way to not get arrested or get any tickets but still be able to paint graffiti. We hope you like it."
      shortDescription:
        description: "Short text description used in various parts of the app where the about is otherwise too long"
        type: string
        example: "Spray paint artwork on canvas; everything is individually painted and handmade."
      website:
        description: "Option website url"
        type: string
        example: "http://urbanart.com"
      email:
        description: "Optional email address"
        type: string
        example: "dave@urbanart.com"
      phoneNumber:
        description: "Optional phone number"
        type: string
        example: "555-8790"
      social:
        description: "Optional social media accounts"
        type: array
        example: [
              {
                "type": "TWITTER",
                "username": "@UrbanArtStore",
                "proof": "https://twitter.com/UrbanArtStore/status/774773006132391936"
              },
              {
                "type": "FACEBOOK",
                "username": "urbanart"
              }
        ]
        items:
          type: object
          required: ["type", "username"]
          properties:
            type:
              description: "The type of social account"
              type: string
              example: "TWITTER"
            username:
              description: "Account username"
              type: string
              example: "@UrbanArtStore"
            proof:
              description: "A url link proving ownership of this account. For example, a tweet saying 'My OpenBazaar handle is ...'"
              type: string
              example: "https://twitter.com/UrbanArtStore/status/774773006132391936"
      nsfw:
        description: "Is this user's page not safe for work?"
        type: boolean
      vendor:
        description: "Is this user a vendor?"
        type: boolean
      moderator:
        description: "Is this user a moderator?"
        type: boolean
      primaryColor:
        description: "Primary RGB profile color in hexadecimal format"
        type: string
        example: "#AF854C"
      secondaryColor:
        description: "Secondary RGB profile color in hexadecimal format"
        type: string
        example: "#E3E3E3"
      textColor:
        description: "Text RGB profile color in hexadecimal format"
        type: string
        example: "#FFFFFF"
      avatarHash:
        description: "The IPFS hash for this node's avatar. This field is added automatically by the server."
        type: string
        example: "QmecpJrN9RJ7smyYByQdZUy5mF6aapgCfKLKRmDtycv9aG"
      headerHash:
        description: "The IPFS hash for this node's header. This field is added automatically by the server."
        type: string
        example: "QmPDLS7TV9Q3gtxRXQVqrm2RpEtz1Mq6u2YGeuEJWCqu6B"
      followerCount:
        description: "The number of peers following this node. This field is added automatically by the server."
        type: integer
        example: 25
      followingCount:
        description: "The number of peers this node is following. This field is added automatically by the server."
        type: integer
        example: 82
      listingCount:
        description: "The number of listings this node has for sale. This field is added automatically by the server."
        type: integer
        example: 11
      lastModified:
        description: "The time this profile was last modified. This field is added automatically by the server."
        type: string
        example: "2016-12-31T15:59:60-08:00"
  Settings:
    type: object
    properties:    
      paymentDataInQR:
        description: "Add order metadata into payment QR code. Most wallets typically save the metadata so this is an optional privacy feature."
        type: boolean
      showNotifications:
        description: "Show notifications which come over the websocket"
        type: boolean
      showNsfw:
        description: "Show not safe for work content"
        type: boolean
      shippingAddresses:
        description: "List of shipping addresses saved for this user"
        type: array
        example: [
              {
               "name": "Seymour Butts",
               "company": "Globex Corporation",
               "addressLineOne": "31 Spooner Street",
               "addressLineTwo": "Apt. 124",
               "city": "Quahog",
               "state": "RI",
               "country": "UNITED_STATES",
               "addressNotes": "Leave package at back door"
              }
          ]
        items:
          description: "A shipping address object"
          type: object
          properties:
            name:
              description: "Name of person to ship to"
              type: string
              example: "Seymour Butts"
            company:
              description: "Optional company name"
              type: string
              example: "Globex Corporation"
            addressLineOne:
              description: "Shipping street address"
              type: string
              example: "31 Spooner Street"
            addressLineTwo:
              description: "Second address line. Sometimes used for apartment numbers."
              type: string
              example: "Apt. 124"
            city:
              description: "City to ship to"
              type: string
              example: "Quahog"
            state:
              description: "State or region ship to"
              type: string
              example: "RI"
            country:
              description: "Country to ship to. Must be one of the countires listed in [countriescodes.proto](https://github.com/OpenBazaar/openbazaar-go/blob/master/pb/protos/countrycodes.proto)."
              type: string
              example: "UNITED_STATES"
            postalCode:
              description: "Postal code ship to"
              type: string
              example: "00093"
            addressNotes:
              description: "Additional information about the address"
              type: string
              example: "Leave package at back door"
      localCurrency:
        description: "The currency to display prices in"
        type: string
        example: "USD"
      country:
        description: "The location of the user. Used for checking if products ships to them. Must be one of the countires listed in [countriescodes.proto](https://github.com/OpenBazaar/openbazaar-go/blob/master/pb/protos/countrycodes.proto)."
        type: string
        example: "UNITED_STATES"
      language:
        description: "The languange preference of the user. Used to select the language in the UI."
        type: string
        example: "English"
      termsAndConditions:
        description: "The saved terms and conditions. Becomes the default text for each listing that is created."
        type: string
        example: "By purchasing this item you agree to the following..."
      refundPolicy:
        description: "The saved refund policy. Becomes the default text for each listing that is created."
        type: string
        example: "All sales are final."
      blockedNodes:
        description: "Ids of peers we the user wishes to block"
        type: array
        example: [
          "QmecpJrN9RJ7smyYByQdZUy5mF6aapgCfKLKRmDtycv9aG",  
          "QmamudHQGtztShX7Nc9HcczehdpGGWpFBWu2JvKWcpELxr",
          "QmPDLS7TV9Q3gtxRXQVqrm2RpEtz1Mq6u2YGeuEJWCqu6B"
        ]
        items:
          type: string
          description: "The peer ID to block"
      moderators:
        description: "Saved list of moderator IDs that will be added to each new listing."
        type: array
        example: [
          "QmNedYJ6WmLhacAL2ozxb4k33Gxd9wmKB7HyoxZCwXid1e",  
          "QmQdi7EaJUmuRUtSaCPkijw5cptFfNcX2EPvMyQwR117Y2"
        ]
        items:
          type: string
          description: "The moderator peer ID"
      smtpSettings:
        description: "Settings for email notifications"
        type: object
        example: {
            "notifications": true,
            "serverAddress": "smtp.urbanart.com:465",
            "username": "urbanart",
            "password": "letmein",
            "senderEmail": "notifications@urbanart.com",
            "recipientEmail": "Dave@gmail.com"
        }
        properties:
          notifications:
            description: "Turn email notifications on and off"
            type: boolean
          serverAddress:
            description: "The outgoing mail server IP address or hostname and port"
            type: string
            example: "smtp.urbanart.com:465"
          username:
            description: "SMTP username"
            type: string
            example: "urbanart"
          password:
            description: "SMTP password"
            type: string
            example: "letmein"
          senderEmail:
            description: "The outgoing email address"
            type: string 
            example: "notifications@urbanart.com"
          recipientEmail:
            description: "The email to send the notifications to"
            type: string
            example: "Dave@gmail.com"
            
          
        